import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import Icon from '@/components/ui/icon';
import SnowEffect from '@/components/SnowEffect';
import { useToast } from '@/hooks/use-toast';

const VIDEOS_URL = 'https://functions.poehali.dev/25ad61b1-3834-4f5e-9278-01d9d55d229d';
const GENERATE_URL = 'https://functions.poehali.dev/506f7442-eb6d-4248-b46c-251dcb121be9';

const Index = () => {
  const { toast } = useToast();
  const [selectedCharacter, setSelectedCharacter] = useState('santa');
  const [childName, setChildName] = useState('');
  const [selectedGreeting, setSelectedGreeting] = useState('birthday');
  const [videos, setVideos] = useState<any[]>([]);
  const [playingVideo, setPlayingVideo] = useState<number | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);

  useEffect(() => {
    loadVideos();
  }, []);

  const loadVideos = async () => {
    try {
      const response = await fetch(VIDEOS_URL);
      const data = await response.json();
      if (data.videos) {
        setVideos(data.videos);
      }
    } catch (error) {
      console.error('Failed to load videos:', error);
    }
  };

  const characters = [
    { id: 'santa', name: '–î–µ–¥ –ú–æ—Ä–æ–∑', icon: 'üéÖ', image: '/img/d48aa981-3b64-42ad-a810-bb7c0d926bdd.jpg' },
    { id: 'snowmaiden', name: '–°–Ω–µ–≥—É—Ä–æ—á–∫–∞', icon: 'üë∏', image: '/img/e7db9042-a0ba-48c2-bb1b-201b2767e23a.jpg' },
    { id: 'snowman', name: '–°–Ω–µ–≥–æ–≤–∏–∫', icon: '‚õÑ', image: '/placeholder.svg' },
  ];

  const greetings = [
    { id: 'birthday', name: '–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è', text: '–î–æ—Ä–æ–≥–æ–π {name}! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞—é —Ç–µ–±–µ —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–µ–±–µ –º–Ω–æ–≥–æ —Ä–∞–¥–æ—Å—Ç–∏!' },
    { id: 'newyear', name: '–° –ù–æ–≤—ã–º –ì–æ–¥–æ–º', text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name}! –Ø, –î–µ–¥ –ú–æ—Ä–æ–∑, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º –ù–æ–≤—ã–º –ì–æ–¥–æ–º! –ñ–µ–ª–∞—é —Ç–µ–±–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞, —á—É–¥–µ—Å –∏ –º–Ω–æ–≥–æ-–º–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–¥ —ë–ª–æ—á–∫–æ–π!' },
    { id: 'goodbehavior', name: '–ó–∞ —Ö–æ—Ä–æ—à–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ', text: '–ú–æ–ª–æ–¥–µ—Ü, {name}! –¢—ã –±—ã–ª –æ—á–µ–Ω—å –ø–æ—Å–ª—É—à–Ω—ã–º –≤ —ç—Ç–æ–º –≥–æ–¥—É! –Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –æ—Å–æ–±–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!' },
    { id: 'achievement', name: '–ó–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', text: '–£–º–Ω–∏—Ü–∞, {name}! –¢—ã –¥–æ–±–∏–ª—Å—è –±–æ–ª—å—à–∏—Ö —É—Å–ø–µ—Ö–æ–≤! –Ø –æ—á–µ–Ω—å —Ä–∞–¥ –∑–∞ —Ç–µ–±—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å—Ç–∞—Ä–∞—Ç—å—Å—è, –∏ —É —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!' },
  ];

  const handleCreateVideo = async () => {
    if (!childName.trim()) return;
    
    setIsGenerating(true);
    const greetingText = greetings.find(g => g.id === selectedGreeting)?.text.replace('{name}', childName) || '';
    
    try {
      toast({
        title: 'üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å',
        description: '–°–æ–∑–¥–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å AI...',
      });

      const response = await fetch(GENERATE_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          character: selectedCharacter,
          name: childName,
          message: greetingText
        })
      });

      const data = await response.json();
      
      if (response.ok && data.success) {
        await loadVideos();
        setChildName('');
        toast({
          title: '‚ú® –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!',
          description: `–ì–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è ${childName} —Å–æ–∑–¥–∞–Ω–æ!`,
        });
      } else {
        toast({
          title: '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
          description: data.error || '–î–æ–±–∞–≤—å—Ç–µ OpenAI API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞',
          variant: 'destructive',
        });
      }
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ',
        variant: 'destructive',
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="min-h-screen relative overflow-hidden">
      <SnowEffect />
      
      <header className="sticky top-0 z-50 bg-primary/95 backdrop-blur text-primary-foreground shadow-lg">
        <nav className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold flex items-center gap-2">
              <span className="text-4xl">üéÑ</span>
              –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –í–∏–¥–µ–æ
            </h1>
            <div className="flex gap-4">
              <a href="#home" className="hover:text-secondary transition-colors">–ì–ª–∞–≤–Ω–∞—è</a>
              <a href="#editor" className="hover:text-secondary transition-colors">–†–µ–¥–∞–∫—Ç–æ—Ä</a>
              <a href="#gallery" className="hover:text-secondary transition-colors">–ì–∞–ª–µ—Ä–µ—è</a>
              <a href="#faq" className="hover:text-secondary transition-colors">FAQ</a>
              <a href="#contacts" className="hover:text-secondary transition-colors">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
            </div>
          </div>
        </nav>
      </header>

      <main className="container mx-auto px-4 py-12 space-y-20">
        <section id="home" className="text-center space-y-8 animate-fade-in">
          <div className="relative">
            <h2 className="text-6xl font-bold mb-4 text-primary sparkle">
              –°–æ–∑–¥–∞–π –≤–æ–ª—à–µ–±–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ!
            </h2>
            <p className="text-2xl text-muted-foreground mb-8">
              –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç –ª—é–±–∏–º—ã—Ö –≥–µ—Ä–æ–µ–≤
            </p>
          </div>
          
          <div className="rounded-3xl overflow-hidden shadow-2xl max-w-4xl mx-auto">
            <img 
              src="/img/26cec7ca-31b6-4e70-8404-7c2a2023c0ce.jpg" 
              alt="–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –≥–µ—Ä–æ–∏"
              className="w-full h-auto"
            />
          </div>

          <div className="grid md:grid-cols-3 gap-6 mt-12">
            <Card className="hover:scale-105 transition-transform border-2 border-primary/20">
              <CardHeader>
                <div className="text-5xl mb-2">‚ú®</div>
                <CardTitle>–õ–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ</CardTitle>
                <CardDescription>–°–æ–∑–¥–∞–π—Ç–µ –≤–∏–¥–µ–æ –∑–∞ 2 –º–∏–Ω—É—Ç—ã</CardDescription>
              </CardHeader>
            </Card>
            <Card className="hover:scale-105 transition-transform border-2 border-secondary/20">
              <CardHeader>
                <div className="text-5xl mb-2">üéÅ</div>
                <CardTitle>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è</CardTitle>
                <CardDescription>–£–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–∞ –¥–µ—Ç–µ–π</CardDescription>
              </CardHeader>
            </Card>
            <Card className="hover:scale-105 transition-transform border-2 border-accent/40">
              <CardHeader>
                <div className="text-5xl mb-2">üéµ</div>
                <CardTitle>–° –º—É–∑—ã–∫–æ–π</CardTitle>
                <CardDescription>–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –º–µ–ª–æ–¥–∏–∏</CardDescription>
              </CardHeader>
            </Card>
          </div>
        </section>

        <section id="editor" className="space-y-8">
          <h2 className="text-5xl font-bold text-center text-primary mb-12">
            <span className="text-5xl mr-2">üé¨</span>
            –†–µ–¥–∞–∫—Ç–æ—Ä –í–∏–¥–µ–æ
          </h2>
          
          <Tabs defaultValue="character" className="max-w-4xl mx-auto">
            <TabsList className="grid w-full grid-cols-3 h-auto">
              <TabsTrigger value="character" className="text-lg py-4">
                <Icon name="Users" className="mr-2" size={20} />
                –ü–µ—Ä—Å–æ–Ω–∞–∂
              </TabsTrigger>
              <TabsTrigger value="music" className="text-lg py-4">
                <Icon name="Music" className="mr-2" size={20} />
                –ú—É–∑—ã–∫–∞
              </TabsTrigger>
              <TabsTrigger value="effects" className="text-lg py-4">
                <Icon name="Sparkles" className="mr-2" size={20} />
                –≠—Ñ—Ñ–µ–∫—Ç—ã
              </TabsTrigger>
            </TabsList>

            <TabsContent value="character" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</CardTitle>
                  <CardDescription>–ö—Ç–æ –±—É–¥–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç—å?</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid md:grid-cols-3 gap-4">
                    {characters.map(char => (
                      <Card 
                        key={char.id}
                        className={`cursor-pointer transition-all ${
                          selectedCharacter === char.id 
                            ? 'ring-4 ring-primary shadow-xl scale-105' 
                            : 'hover:scale-105'
                        }`}
                        onClick={() => setSelectedCharacter(char.id)}
                      >
                        <CardContent className="pt-6 text-center space-y-3">
                          <div className="text-6xl">{char.icon}</div>
                          <img src={char.image} alt={char.name} className="w-full h-32 object-cover rounded-lg" />
                          <p className="font-semibold text-lg">{char.name}</p>
                        </CardContent>
                      </Card>
                    ))}
                  </div>

                  <div className="space-y-4">
                    <Label htmlFor="greeting" className="text-lg">–¢–∏–ø –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è</Label>
                    <div className="grid md:grid-cols-2 gap-3">
                      {greetings.map(greeting => (
                        <Card 
                          key={greeting.id}
                          className={`cursor-pointer transition-all ${
                            selectedGreeting === greeting.id 
                              ? 'ring-2 ring-primary bg-primary/5' 
                              : 'hover:bg-accent/50'
                          }`}
                          onClick={() => setSelectedGreeting(greeting.id)}
                        >
                          <CardContent className="py-4">
                            <p className="font-semibold">{greeting.name}</p>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>

                  <div className="space-y-4">
                    <Label htmlFor="childName" className="text-lg">–ò–º—è —Ä–µ–±–µ–Ω–∫–∞</Label>
                    <Input 
                      id="childName"
                      value={childName}
                      onChange={(e) => setChildName(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è..."
                      className="text-lg py-6"
                    />
                  </div>

                  {childName && selectedGreeting && (
                    <Card className="bg-accent/30">
                      <CardContent className="pt-6">
                        <p className="text-sm text-muted-foreground mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞:</p>
                        <p className="italic">"{greetings.find(g => g.id === selectedGreeting)?.text.replace('{name}', childName)}"</p>
                      </CardContent>
                    </Card>
                  )}

                  <Button 
                    onClick={handleCreateVideo}
                    className="w-full text-lg py-6 bg-gradient-to-r from-primary to-secondary hover:opacity-90"
                    disabled={!childName.trim() || isGenerating}
                  >
                    {isGenerating ? (
                      <>
                        <Icon name="Loader2" className="mr-2 animate-spin" size={24} />
                        üéôÔ∏è –°–æ–∑–¥–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ...
                      </>
                    ) : (
                      <>
                        <Icon name="Wand2" className="mr-2" size={24} />
                        üé§ –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                      </>
                    )}
                  </Button>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="music" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º—É–∑—ã–∫–∏</CardTitle>
                  <CardDescription>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω–æ–≤—É—é –º–µ–ª–æ–¥–∏—é</CardDescription>
                </CardHeader>
                <CardContent className="space-y-3">
                  {['Jingle Bells', '–í –ª–µ—Å—É —Ä–æ–¥–∏–ª–∞—Å—å —ë–ª–æ—á–∫–∞', '–ù–æ–≤–æ–≥–æ–¥–Ω—è—è', '–°–Ω–µ–∂–∏–Ω–∫–∏'].map((song, i) => (
                    <div key={i} className="flex items-center gap-3 p-3 hover:bg-accent rounded-lg cursor-pointer transition-colors">
                      <Icon name="Music" size={20} />
                      <span className="flex-1">{song}</span>
                      <Icon name="Play" size={20} className="text-primary" />
                    </div>
                  ))}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="effects" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</CardTitle>
                  <CardDescription>–î–æ–±–∞–≤—å—Ç–µ –º–∞–≥–∏—é –≤ –≤–∏–¥–µ–æ</CardDescription>
                </CardHeader>
                <CardContent className="grid md:grid-cols-2 gap-4">
                  {[
                    { icon: 'Snowflake', name: '–ü–∞–¥–∞—é—â–∏–π —Å–Ω–µ–≥', active: true },
                    { icon: 'Sparkles', name: '–ë–ª–µ—Å—Ç–∫–∏', active: true },
                    { icon: 'Zap', name: '–§–µ–π–µ—Ä–≤–µ—Ä–∫', active: false },
                    { icon: 'Star', name: '–ó–≤–µ–∑–¥–æ—á–∫–∏', active: false },
                  ].map((effect, i) => (
                    <div key={i} className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                      effect.active ? 'bg-accent border-primary' : 'border-muted hover:border-primary/50'
                    }`}>
                      <div className="flex items-center gap-3">
                        <Icon name={effect.icon} size={24} />
                        <span className="font-medium">{effect.name}</span>
                      </div>
                    </div>
                  ))}
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </section>

        <section id="gallery" className="space-y-8">
          <h2 className="text-5xl font-bold text-center text-primary mb-12">
            <span className="text-5xl mr-2">üé•</span>
            –ì–∞–ª–µ—Ä–µ—è –≥–æ—Ç–æ–≤—ã—Ö –≤–∏–¥–µ–æ
          </h2>
          
          <div className="grid md:grid-cols-3 gap-6">
            {videos.map(video => (
              <Card key={video.id} className="overflow-hidden hover:shadow-xl transition-shadow">
                <div className="relative">
                  {playingVideo === video.id ? (
                    <div className="relative bg-gradient-to-br from-primary/20 to-secondary/20 p-8 flex flex-col items-center justify-center min-h-[12rem]">
                      <audio 
                        src={video.videoUrl || video.video_url} 
                        controls 
                        autoPlay
                        className="w-full"
                        onEnded={() => setPlayingVideo(null)}
                      />
                      <div className="mt-4 text-center">
                        <div className="text-6xl mb-2">{characters.find(c => c.id === video.character)?.icon}</div>
                        <p className="text-sm text-muted-foreground">üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ</p>
                      </div>
                      <Button 
                        size="sm" 
                        variant="secondary"
                        className="absolute top-2 right-2"
                        onClick={() => setPlayingVideo(null)}
                      >
                        <Icon name="X" size={16} />
                      </Button>
                    </div>
                  ) : (
                    <>
                      <img src={video.thumbnail} alt={video.name} className="w-full h-48 object-cover" />
                      <div className="absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity">
                        <Button 
                          size="lg" 
                          className="bg-white text-primary hover:bg-white/90"
                          onClick={() => setPlayingVideo(video.id)}
                        >
                          <Icon name="Volume2" className="mr-2" />
                          –°–ª—É—à–∞—Ç—å
                        </Button>
                      </div>
                    </>
                  )}
                </div>
                <CardContent className="pt-4">
                  <p className="font-semibold text-lg">–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {video.name}</p>
                  <p className="text-sm text-muted-foreground">
                    {characters.find(c => c.id === video.character)?.name}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>

        <section id="how" className="bg-gradient-to-r from-primary/10 to-secondary/10 rounded-3xl p-12 space-y-8">
          <h2 className="text-5xl font-bold text-center text-primary mb-12">
            –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ?
          </h2>
          
          <div className="grid md:grid-cols-4 gap-6">
            {[
              { step: '1', icon: 'UserPlus', title: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', desc: '–î–µ–¥ –ú–æ—Ä–æ–∑, –°–Ω–µ–≥—É—Ä–æ—á–∫–∞ –∏–ª–∏ –°–Ω–µ–≥–æ–≤–∏–∫' },
              { step: '2', icon: 'PenTool', title: '–£–∫–∞–∂–∏—Ç–µ –∏–º—è', desc: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞' },
              { step: '3', icon: 'Palette', title: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç—ã', desc: '–ú—É–∑—ã–∫–∞, —Å–Ω–µ–≥, –±–ª–µ—Å—Ç–∫–∏' },
              { step: '4', icon: 'Download', title: '–°–∫–∞—á–∞–π—Ç–µ –≤–∏–¥–µ–æ', desc: '–ì–æ—Ç–æ–≤–æ! –î–µ–ª–∏—Ç–µ—Å—å —Ä–∞–¥–æ—Å—Ç—å—é' },
            ].map((item, i) => (
              <div key={i} className="text-center space-y-4">
                <div className="w-16 h-16 rounded-full bg-primary text-primary-foreground text-2xl font-bold flex items-center justify-center mx-auto">
                  {item.step}
                </div>
                <Icon name={item.icon} size={40} className="mx-auto text-secondary" />
                <h3 className="font-semibold text-xl">{item.title}</h3>
                <p className="text-muted-foreground">{item.desc}</p>
              </div>
            ))}
          </div>
        </section>

        <section id="faq" className="max-w-3xl mx-auto space-y-8">
          <h2 className="text-5xl font-bold text-center text-primary mb-12">
            <span className="text-5xl mr-2">‚ùì</span>
            –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
          </h2>
          
          <Accordion type="single" collapsible className="space-y-4">
            <AccordionItem value="item-1" className="border-2 border-primary/20 rounded-lg px-6">
              <AccordionTrigger className="text-lg font-semibold hover:text-primary">
                –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ?
              </AccordionTrigger>
              <AccordionContent className="text-muted-foreground">
                –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π.
              </AccordionContent>
            </AccordionItem>

            <AccordionItem value="item-2" className="border-2 border-primary/20 rounded-lg px-6">
              <AccordionTrigger className="text-lg font-semibold hover:text-primary">
                –ö–∞–∫–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ?
              </AccordionTrigger>
              <AccordionContent className="text-muted-foreground">
                –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª–∏—Ç—Å—è 30-60 —Å–µ–∫—É–Ω–¥. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö!
              </AccordionContent>
            </AccordionItem>

            <AccordionItem value="item-3" className="border-2 border-primary/20 rounded-lg px-6">
              <AccordionTrigger className="text-lg font-semibold hover:text-primary">
                –ú–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–º–µ–Ω?
              </AccordionTrigger>
              <AccordionContent className="text-muted-foreground">
                –î–∞! –í —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–æ 5 –∏–º–µ–Ω –¥–µ—Ç–µ–π –≤ –æ–¥–Ω–æ–º –≤–∏–¥–µ–æ.
              </AccordionContent>
            </AccordionItem>

            <AccordionItem value="item-4" className="border-2 border-primary/20 rounded-lg px-6">
              <AccordionTrigger className="text-lg font-semibold hover:text-primary">
                –í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –≤–∏–¥–µ–æ?
              </AccordionTrigger>
              <AccordionContent className="text-muted-foreground">
                –í–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤—Å–µ–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏.
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </section>

        <section id="contacts" className="text-center space-y-8 bg-gradient-to-r from-primary to-secondary text-primary-foreground rounded-3xl p-12">
          <h2 className="text-5xl font-bold mb-8">
            <span className="text-5xl mr-2">üìß</span>
            –ö–æ–Ω—Ç–∞–∫—Ç—ã
          </h2>
          
          <div className="space-y-4 max-w-xl mx-auto">
            <p className="text-xl">–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏!</p>
            
            <div className="flex flex-col gap-4">
              <a href="mailto:info@newyear-video.ru" className="flex items-center justify-center gap-3 text-lg hover:underline">
                <Icon name="Mail" size={24} />
                info@newyear-video.ru
              </a>
              
              <a href="tel:+79991234567" className="flex items-center justify-center gap-3 text-lg hover:underline">
                <Icon name="Phone" size={24} />
                +7 (999) 123-45-67
              </a>
            </div>

            <div className="flex justify-center gap-6 mt-8">
              <Button variant="secondary" size="lg" className="text-lg">
                <Icon name="MessageCircle" className="mr-2" />
                Telegram
              </Button>
              <Button variant="secondary" size="lg" className="text-lg">
                <Icon name="Share2" className="mr-2" />
                VK
              </Button>
            </div>
          </div>
        </section>
      </main>

      <footer className="bg-primary/95 text-primary-foreground py-8 mt-20">
        <div className="container mx-auto px-4 text-center">
          <p className="text-lg">üéÑ –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –í–∏–¥–µ–æ ¬© 2025. –°–æ–∑–¥–∞–π—Ç–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏! ‚ú®</p>
        </div>
      </footer>
    </div>
  );
};

export default Index;