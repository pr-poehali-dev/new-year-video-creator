import { useState, useEffect } from 'react';
import SnowEffect from '@/components/SnowEffect';
import { useToast } from '@/hooks/use-toast';
import Header from '@/components/home/Header';
import HeroSection from '@/components/home/HeroSection';
import VideoEditor from '@/components/home/VideoEditor';
import VideoGallery from '@/components/home/VideoGallery';
import HowItWorks from '@/components/home/HowItWorks';
import FAQ from '@/components/home/FAQ';
import ContactSection from '@/components/home/ContactSection';
import Footer from '@/components/home/Footer';

const VIDEOS_URL = 'https://functions.poehali.dev/25ad61b1-3834-4f5e-9278-01d9d55d229d';
const GENERATE_URL = 'https://functions.poehali.dev/506f7442-eb6d-4248-b46c-251dcb121be9';

const Index = () => {
  const { toast } = useToast();
  const [selectedCharacter, setSelectedCharacter] = useState('santa');
  const [childName, setChildName] = useState('');
  const [selectedGreeting, setSelectedGreeting] = useState('birthday');
  const [videos, setVideos] = useState<any[]>([]);
  const [playingVideo, setPlayingVideo] = useState<number | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);

  useEffect(() => {
    loadVideos();
  }, []);

  const loadVideos = async () => {
    try {
      const response = await fetch(VIDEOS_URL);
      const data = await response.json();
      if (data.videos) {
        setVideos(data.videos);
      }
    } catch (error) {
      console.error('Failed to load videos:', error);
    }
  };

  const characters = [
    { id: 'santa', name: '–î–µ–¥ –ú–æ—Ä–æ–∑', icon: 'üéÖ', image: '/img/d48aa981-3b64-42ad-a810-bb7c0d926bdd.jpg' },
    { id: 'snowmaiden', name: '–°–Ω–µ–≥—É—Ä–æ—á–∫–∞', icon: 'üë∏', image: '/img/e7db9042-a0ba-48c2-bb1b-201b2767e23a.jpg' },
    { id: 'snowman', name: '–°–Ω–µ–≥–æ–≤–∏–∫', icon: '‚õÑ', image: '/placeholder.svg' },
  ];

  const greetings = [
    { id: 'birthday', name: '–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è', text: '–î–æ—Ä–æ–≥–æ–π {name}! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞—é —Ç–µ–±–µ —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–µ–±–µ –º–Ω–æ–≥–æ —Ä–∞–¥–æ—Å—Ç–∏!' },
    { id: 'newyear', name: '–° –ù–æ–≤—ã–º –ì–æ–¥–æ–º', text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name}! –Ø, –î–µ–¥ –ú–æ—Ä–æ–∑, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º –ù–æ–≤—ã–º –ì–æ–¥–æ–º! –ñ–µ–ª–∞—é —Ç–µ–±–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞, —á—É–¥–µ—Å –∏ –º–Ω–æ–≥–æ-–º–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–¥ —ë–ª–æ—á–∫–æ–π!' },
    { id: 'goodbehavior', name: '–ó–∞ —Ö–æ—Ä–æ—à–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ', text: '–ú–æ–ª–æ–¥–µ—Ü, {name}! –¢—ã –±—ã–ª –æ—á–µ–Ω—å –ø–æ—Å–ª—É—à–Ω—ã–º –≤ —ç—Ç–æ–º –≥–æ–¥—É! –Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –æ—Å–æ–±–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!' },
    { id: 'achievement', name: '–ó–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', text: '–£–º–Ω–∏—Ü–∞, {name}! –¢—ã –¥–æ–±–∏–ª—Å—è –±–æ–ª—å—à–∏—Ö —É—Å–ø–µ—Ö–æ–≤! –Ø –æ—á–µ–Ω—å —Ä–∞–¥ –∑–∞ —Ç–µ–±—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å—Ç–∞—Ä–∞—Ç—å—Å—è, –∏ —É —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!' },
  ];

  const handleCreateVideo = async () => {
    if (!childName.trim()) return;
    
    setIsGenerating(true);
    const greetingText = greetings.find(g => g.id === selectedGreeting)?.text.replace('{name}', childName) || '';
    
    try {
      toast({
        title: 'üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å',
        description: '–°–æ–∑–¥–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å AI...',
      });

      const response = await fetch(GENERATE_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          character: selectedCharacter,
          name: childName,
          message: greetingText
        })
      });

      const data = await response.json();
      
      if (response.ok && data.success) {
        await loadVideos();
        setChildName('');
        toast({
          title: '‚ú® –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!',
          description: `–ì–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è ${childName} —Å–æ–∑–¥–∞–Ω–æ!`,
        });
      } else {
        toast({
          title: '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
          description: data.error || '–î–æ–±–∞–≤—å—Ç–µ OpenAI API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞',
          variant: 'destructive',
        });
      }
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ',
        variant: 'destructive',
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="min-h-screen relative overflow-hidden">
      <SnowEffect />
      <Header />

      <main className="container mx-auto px-4 py-12 space-y-20">
        <HeroSection />
        
        <VideoEditor
          characters={characters}
          greetings={greetings}
          selectedCharacter={selectedCharacter}
          setSelectedCharacter={setSelectedCharacter}
          selectedGreeting={selectedGreeting}
          setSelectedGreeting={setSelectedGreeting}
          childName={childName}
          setChildName={setChildName}
          isGenerating={isGenerating}
          handleCreateVideo={handleCreateVideo}
        />

        <VideoGallery
          videos={videos}
          characters={characters}
          playingVideo={playingVideo}
          setPlayingVideo={setPlayingVideo}
        />

        <HowItWorks />
        <FAQ />
        <ContactSection />
      </main>

      <Footer />
    </div>
  );
};

export default Index;
